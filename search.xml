<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[文献之美-残差网图像分割]]></title>
    <url>%2F2019%2F02%2F06%2F%E6%96%87%E7%8C%AE%E4%B9%8B%E7%BE%8E-%E6%AE%8B%E5%B7%AE%E7%BD%91%E5%9B%BE%E5%83%8F%E5%88%86%E5%89%B2%2F</url>
    <content type="text"><![CDATA[1.论文概要研究背景：论文链接。语义图像分割（Semantic image segmentation）一直是CV领域的热点。经过语义分割后，图像中的每个像素被分配一个类别标签。目前语义图像分割常用框架通常为把全连接替换为卷积层的全卷积网络。残差块的引入通过跳跃连接的引入有效的解决了梯度消失的问题。本文通过改进残差网络设计用于语义图像分割。对于图像语义分割，“上下文信息”获取的越多越好。为了获取更多“上下文信息”现有的方法大多存在网络架构过于复杂，大规模的超参数调整的问题。本文提出的金字塔残差块简单而有效。不仅限于文中的任务，是一种可应用于基于ResNet的其他体系结构或任务的通用方法。 算法改进：本文提出名为金字塔残差快（pyramid residual block），可以更好的利用上下文信息并增强关键特征。相比传统残差块，Pyramid残差块添加了两部分，首先是聚合基于不同区域上下文信息的Pyramid池化块，然后添加了注意力机制，能通过逐元素乘法运算自适应地重新校准特征响应，从而增强有用特征并抑制次要特征。 实验验证：本文提出的金字塔残差块在PASCAL VOC 2012分段数据集中表现出色，并且在标准残差块上大大提高了分割精度。 2.算法应用创新点1：Pyramid Pooling Module在图像语义分割中，已经有许多方法更有效地收集背景信息。[1]最先提出金字塔Pooling模块。[1]中金字塔汇集模块附在ResNet的顶部，而本文的金字塔汇集模块嵌入到ResNet的残差块中如图1。具体而言，细粒度或局部信息有助于实现良好的像素级精度，图像的全局背景能够澄清局部模糊性。在深度神经网络中，虽然理论上来自更高层次的特征已经具有超出输入图像尺寸的非常大的感受野，但实际上感受野的尺寸远小于理论尺寸。这阻碍了充分合并重要的上下文信息，Pyramid Pooling Module有效的解决了这个问题。如图[1]所示，改进后的模块将来自残差块主分支的特征映射作为输入。它具有三个并行分支，每个分支包含一个池化层，一个ReLU激活函数，两个卷积层（1×1卷积），一个sigmoid函数和一个上采样操作。三个分支中的池的bin大小分别设置为1×1,2×2和4×4且都为平均池化。池化操作后的第一个卷积层用于降维。之后的第二卷积层用于维度增加，恢复原始信道数。再经过上采样操作后，来自三个并行分支的特征映射通过逐元素求和融合，得到注意力概率分布图（attention probability maps）。 创新点2：注意力机制在金字塔池模块的每个分支中，对于第二个卷积后的激活函数，选择sigmoid函数而不是ReLU函数来规范化特征映射的每个元素。最终拿输出的注意力概率分布图和来自残差块主分支的特征图执行逐元素乘法运算。通过这种简单的方式，可以为更有用的特征响应分配更大的权重，从而有助于提高特征可辨性。 3.实验实验数据集为PASCAL VOC 2012，广泛用于的语义分割数据集。包含20个对象类别和一个背景类。我们使用[2]提供的额外注释来增加数据，分别生成10582,1449和1456个用于训练，验证和测试的图像。 使用随机梯度下降（SGD）训练模型，批量大小为10，最大迭代次数为20K。为了增强数据，对所有训练图像使用随机镜像和随机裁剪。使用已经在ImageNet数据集上预训练的ResNet-50或ResNet-101网络作为基础模型。最后一个残余块的输出由1×1卷积层和softmax非线性处理，以产生最终的像素分割结果。 为了探索降维对性能的影响，用金字塔残差块替换ResNet-50的最后残差块（res5c），并将维数降低层的通道数（即图1中的’Conv1’）设置为分别为1024,512,256和128。结果显示合理压缩特征的维数可以在一定程度上提高分割精度;这可能是因为删除了冗余特征。但是，当维数降低太多时，由于判别特征的丢失，结果又会变差。本实验显示当通道数为256时效果最好。 为了评估单个组件的有效性，分别保留金字塔池模块和注意力机制两个组件中的一个并移除另一个。实验结果显示每个组件都有利于分割效果，当二者合并时效果最好。由于具有一个金字塔残差块（res5c）的ResNet-50在很大程度上优于基本模型，实验进一步用金字塔残差块替换原始ResNet-50的两个块（res5c和res4f）和三个块（res5c，res4f和res4c）。实验结果显示，具有两个金字塔残差块的模型比仅有一个金字塔残差块的模型带来了0.91％的改进，具有三个金字塔残余块的模型进一步将性能提高了0.71％。因此，本文提出的金字塔残差块对于改进基于ResNet的语义分割系统是简单而有效的。 为了探究更深层次的神经网络是否有利于像素方式的语义分割。实验采用预先培训的ResNet-101，其修改与ResNet-50相同。以相同的方式，一个块（res5c），两个块（res5c和res4b22）和三个块（res5c，res4b22和res4b19）分别被金字塔残余块替换。实验结果显示，相同的设置下，ResNet-101在很大程度上优于ResNet-50。此外，当更换的块数增加时，性能从71.27％提高到75.38％。更深层次的ResNet也受益于更多金字塔剩余块。对比实验结果如图2。 [1] H. Zhao, J. Shi, X. Qi, X. Wang, and J. Jia, “Pyramid scene parsing network,” arXiv preprint arXiv:1612.01105, 2016[2] B. Hariharan, P. Arbelaez, L. Bourdev, S. Maji, and J. Malik, “Semantic ´contours from inverse detectors,” in Computer Vision (ICCV), 2011 IEEE International Conference on. IEEE, 2011, pp. 991–998.]]></content>
      <tags>
        <tag>残差网</tag>
        <tag>图像语义分割</tag>
        <tag>图像分类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[文献之美-3D残差CNN下高光谱图像分类]]></title>
    <url>%2F2018%2F12%2F06%2F%E6%96%87%E7%8C%AE%E4%B9%8B%E7%BE%8E-3D%E6%AE%8B%E5%B7%AECNN%E4%B8%8B%E9%AB%98%E5%85%89%E8%B0%B1%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB%2F</url>
    <content type="text"></content>
      <tags>
        <tag>高光谱</tag>
        <tag>遥感</tag>
        <tag>CNN</tag>
        <tag>残差网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[论文写作-英文好句积累]]></title>
    <url>%2F2018%2F10%2F03%2F%E8%AE%BA%E6%96%87%E5%86%99%E4%BD%9C-%E8%8B%B1%E6%96%87%E5%A5%BD%E5%8F%A5%E7%A7%AF%E7%B4%AF%2F</url>
    <content type="text"></content>
      <tags>
        <tag>论文写作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git学习笔记]]></title>
    <url>%2F2015%2F03%2F29%2FGit%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[引言 Git号称是世界上最先进的分布式版本控制系统，没错玩熟了它你就离高端大气上档次又近了一步。前段时间看实习招聘信息，有些公司都不用去当地办公，只要会Git可以远程完成任务，当时就觉得Git一定要好好学一学，虽然之前弄博客看了一些Git的内容，但当时是单纯的跟着教程去敲的，很多地方都没真正掌握。好记性不如烂键盘，这篇博客是对Git用法的精简，涉及到的都是硬核，便于自己忘了回头查阅，也希望可以帮到其他的初学者。详细的Git手册可以参考Git-Book，这个网站各种语言都有。 Git初识与安装要它干嘛：简单地说Git的诞生与一众事物一样，为了进一步解放你的双手。Git让你和队友配合更方便，提供给你们一个协作编辑的平台，并且把你们每次的动作（也可认为是新的版本）信息记录，便于日后分析和版本回退。 怎么获取：Git对Linux、Mac和Windows都支持，具体步骤就不详述了，因为本人人穷没用过Mac，而且又境界不高，Linux用的不太六。网上安装教程还是很详细的，Windows用户直接去Git官网下载安装。Git官网下载页面。 Git里的行话分布式：学习任何东西，都得先把这个邻域频繁出场且刺眼的“语料”理解透彻，这决定了你是否可以愉快无痛的把玩它。说到Git就想到了分布式版本控制系统，一分为二，版本控制系统前文已经解释了，那分布式好像字面就能理解，但与版本控制系统连起来读意思又不明确了。与集中式对比理解，集中式是一台中央服务器存了一切版本信息，你和队友电脑里啥也没，因为你们没权限，想用要么局域网要么互联网，与主机建立连接后才能修改，改完后主机又把相关信息存起来了。而分布式就不同了，此时你和队友的电脑都是“中央服务器”，因为你们电脑里都存储着全部的版本信息。你们各自的修改信息可以两两互换，也可以几个人借助一个服务器愉快的交流。再也不怕一台机子熄火全员收工了呢。 仓库：仓库就是一个目录，目录里的文件动态被Git记录跟踪。一个仓库需要创建和初始化。1234$ mkdir git_breeze //创建目录$ cd git_breeze //打开创建好的目录$ git init //把目录变为Git可以控制的库Initialized empty Git repository in L:/git_test/git_breeze/.git/ 仓库搞定了，自然要学会往里面放东西、取东西。放东西时可以一次性放一批，逐个文件通过git add 文件名添加。最后通过一条命令git commit -m &quot;写一句概括本次修改的话&quot; 完成入库。 暂存区在了解暂存区之前，先要知道Git里的工作区。工作区就是你存放在本地硬盘里的Git文件夹信息。当你把工作区的文件修改后，要传到版本库里。在上文仓库中提到了入库两步骤，首先git add此时可以理解为把文件从工作区传到了暂存区。而git commit是把文件从暂存区传到版本库里的分枝master中。 分枝暂存区中说到，master用来接收暂存区的版本信息。master就是一条分支，这条支线上包含完整的版本历史信息，每个版本就是一个节点。HEAD带表当前版本指向master。在多人协作中为了在不影响他人下又能自己灵活支配Git库存储，一般要自己创建一条像master的分支。待自己的任务完成后再与master分支合并。有时当多个人对同一内容分别更改并同时提交时会有冲突，用$ git status查看冲突位置并做更改。123456789$ git checkout -b newbra //创建并切换到新分支newbra$ git checkout master //切换回master分支$ git merge newbra //把newbra分支下的动作合并到master分支//上句默认快速合并，为了分支合并信息受保护，常加参数 --no--ff如下$ git merge --no--ff -m &quot;此时创建新commit，此处写更改信息&quot; newbra$ git branch -d newbra //如需删除刚刚创建的newbra分支执行之$ git branch //实时查看库里的分枝信息 标签简单的理解就是给一个版本起一个容易念容易写的名字，以后调的话方便一点。12345$ git tag breeze1.0 //在当前分支最新提交的commit打一个标签$ git tag -a 版本名 -m “描述” 版本commit的id号 //创建有说明的标签$ git tag breeze1.0 commit的id号 //对一个指定commit打标签$ git log --pretty=oneline --abbrev-commit //查看历史commit id号$ git tag //查看所有标签 Git里的雷区Github与GitGit、Github一个比一个出名，出名到一部分未入深坑的用户都不知道谁是谁什么关系。Git是分布式版本控制系统。顾名思义一个仓库可以分布到不同主机。但是宗旨是多人协作下多版本管理，为了协作方便自然要有一个大家随时都能存取查改的平台，Github应用而生，为用户提供Git仓库托管，让本地与远程同步。二者的传输通过SSH加密传输。所以要获取SSH Key才能愉快玩耍，获取方法如下。1$ ssh-keygen -t rsa -C &quot;你的邮箱&quot; 获取后用户目录下会有.ssh文件夹放了两个密匙一个私匙和一个公匙，私匙要保管好。最后到你Github设置里把密匙输入就OK了。推送本地仓库到远程Github非常简单。首先你得有一个向前文那样已经$ Git init初始化好的本地仓库。接着在Github里创建一个同名repository。接着网页就提示你怎么做，你只需在本地仓库下的Git Bash里输入网页提示的第二种方法如下。到此你的本地仓库就上传到了你的Github账户里了12$ git remote add origin https://github.com/你的Github账户名/你的仓库名$ git push -u origin master 接着逆向思维一下，上面是本地Git上传到远程Github，那么怎么把远程Github克隆到本地Git库里呢。一句搞定。1$ git clone https://github.com/你的Github账户名/你的仓库名 Git里的套路版本信息查改：12345$ git status //实时查看仓库状态$ git diff 文档名 //查看文档前后改动的内容$ git diff HEAD -- 文档名 //查看工作区和版本库里最新版本的区别$ git log //查看历史提交日志$ git reflog //查看你敲过的历史命令 以上是常用的查看版本信息的命令，Git的过人之处并不是记录版本信息，而是帮你一次次在各版本间跳跃转换，你可以跳跃回上个版本或任意版本，或是后悔了在撤销此次转换再恢复过来，get reset就是干这个活的，具体的参数如下。12$ git reset --hard HEAD^ //^数量表示当前版本的前几个，数较大时HEAD~50$ git reset --hard 版本号 //是的每次修改都有一个对应的版本号可以直接用 上面是版本之间的跳转，当你只提交到暂存区时想回退怎么办呢，又或是刚在工作区修改完想回退怎么办呢?123$ git checkout -- 文档名 //工作区修改撤销$ git reset HEAD 文档名 //以提交到暂存区的修改撤销，此句撤销到工作区 //还需接着运行上一句一并撤销工作区的修改 文件的删除通常使用$git rm 文件名只有执行了这句才把文件从git版本库里真正删除，直接在目录下（工作区）删除后，版本库里还存在被删除文件的信息。 分支运用 bug修复时，用$ git stash把当前进度存储，再运用分支的便利性创建bug分支进行更改。修改完毕后再用$ git stash pop恢复刚才的进度。 把本地写好的分支推送到远程时用命令$ git push 远程库名 本地要推的分支名 常规clone远程库到本地后，只有master分支，想要在其他分支工作需要$ git checkout -b 目标分支名本地 origin/目标分支名远程以此来和远程库分支对应。创建以后还要$ git branch --set-upstream 本地分支名 origin/远程分支名 $ git pull从远程抓取分支提交信息，用于本地分支推送失败时排查冲突。]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown简易教程]]></title>
    <url>%2F2015%2F01%2F29%2Fmarkdown%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[教程说明 本教程简略的列出了markdown最常用的基础用法，便于快速上手。关于进一步的用法技巧将在第二部分基础语法后逐步完善积累。 基础语法标题：“ # ”可用于标题标记，符号的个数依次对应标题的阶数（例如基础语法前有一个符号“ # ”，以下的小标题依次加一个“#”）。当进入下一个大标题例如“2.”时，“#”再从一个依次开始。 强调：对需强调的词语两端各加一个 “ * ” 。 列表：对于无序列表只需在各标题前加“ + ”或者“ - ”，还有“ * ”也可以，不过记一个就行了。具体事例如下。 我前面有个 “ - ”。 我前面有个 “ + ”。 我前面有个 “ * ”。 链接：分为行内和参考两种形式。行内形式链接放圆括弧，文字放方括弧,例如微风拂来。参考形式是在段落链接较多时，把方括弧后的圆括弧还为响应的数字，如微风拂来紧接着下面标出每个数字对应的域名。1[1]: breeze.ink 代码：一般在编辑器里面有直接插入代码块的功能，这里推荐Madoko在线编辑器或者Haroopad线下编辑器，二者都可以在markdown编写的过程中即时可视化页面，另外有很多强大的功能Madoko。 图片：图片的写法参考链接的写法写法如下。另外在madoko编辑器中有直接插入图片的功能，类似的还有许多这样的快捷功能键。1![图片名称](../img.jpg "Title") 大规模的图片存储要用到外链图床服务，推荐七牛云。具体操作步骤参考使用七牛存储图片 进阶语法##实现文本指定位置跳转在写文章时，有时我们需要赋予一个词链接效果，可以跳转到文章指定位置，多数情况跳转到某个标题处。注意name 参数可以自定义，&lt;/a&gt;记得要加，不然后文都成了链接。123[赋予跳转效果的词语](#name)……&lt;a id='name'&gt;标题&lt;/a&gt;]]></content>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
</search>
